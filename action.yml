name: '.NET Reactor Run'
author: Eziriz
description: 'Runs .NET Reactor based on the operating system of the GitHub Actions runner.'
branding:
  icon: 'shield'
  color: 'blue' 
inputs:
  project_file:
    description: 'Path to the .NET Reactor project file.'
    required: false
  input_path:
    description: 'Input path of the .NET assembly to obfuscate.'
    required: false
  output_path:
    description: 'Output path for the obfuscated .NET assembly.'
    required: false
  master_key:
    description: 'Master Key'
    required: false
  additional_arguments:
    description: '(Additional) command-line parameters.'
    required: false

runs:
  using: "composite"
  steps:
    - name: Check and Install .NET Reactor if needed
      run: |
        os_name=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')
        reactor_dir="${{ env.DOTNETREACTORROOT }}"
        
        exe_name="dotNET_Reactor"
        if [[ "${{ runner.os }}" != "Windows" ]]; then
          echo "This job must run on Windows"
          exit 1
        fi

        exe_name="dotNET_Reactor.Console.exe"
        
        if [ ! -f "$reactor_dir/$exe_name" ]; then
          echo "Installing latest .NET Reactor version..."
        
          extract_dir="dotnet_reactor"
          download_url="https://raw.githubusercontent.com/ztzzxyz/dotnet-reactor-run-action/main/windows_6_9_0_0.zip"
        
          echo "Downloading .NET Reactor ($download_url)..."
          curl -L $download_url -o dotNetReactor.zip || { echo "Download failed"; exit 1; }

          echo "Unzipping .NET Reactor to ${extract_dir}..."
          7z x dotNetReactor.zip -o./${extract_dir} || { echo "Unzip failed"; exit 1; }
        
          echo "DOTNETREACTORROOT=$PWD/${extract_dir}" >> $GITHUB_ENV          
        fi
      shell: bash

    - name: Execute .NET Reactor
      run: |
        command="${{ env.DOTNETREACTORROOT }}/dotNET_Reactor.Console.exe"
        
        args=""

        # Dynamically build arguments
        if [ -n "${{ env.REACTOR_MKEY }}" ]; then
          echo "${{ env.REACTOR_MKEY }}" >> master.mkey
          args+=" -masterkeyfile master.mkey"
        fi
        [[ -n "${{ inputs.input_path }}" ]] && args+=" -file '${{ inputs.input_path }}'"
        [[ -n "${{ inputs.project_file }}" ]] && args+=" -project '${{ inputs.project_file }}'"
        [[ -n "${{ inputs.output_path }}" ]] && args+=" -targetfile '${{ inputs.output_path }}'"
        [[ -n "${{ inputs.additional_arguments }}" ]] && args+=" ${{ inputs.additional_arguments }}"
        
        echo "$command $args"
        
        full_command="$command $args"
        eval $full_command
      shell: bash
